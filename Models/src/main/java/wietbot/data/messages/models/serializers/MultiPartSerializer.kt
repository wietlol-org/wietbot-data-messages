// hash: #1c63fccc
// @formatter:off

package wietbot.data.messages.models.serializers

import bitblock.api.serialization.DeserializationContext
import bitblock.api.serialization.ModelSerializer
import bitblock.api.serialization.Schema
import bitblock.api.serialization.SerializationContext
import bitblock.api.serialization.deserialize
import java.io.InputStream
import java.io.OutputStream
import java.util.UUID
import utils.common.streams.readUnsignedVarInt
import utils.common.streams.writeUnsignedVarInt
import wietbot.data.messages.models.builders.MultiPartBuilder
import wietbot.data.messages.models.models.*
import wietbot.data.messages.models.models.MultiPart

// Generated by BitBlock version 1.0.0

// @formatter:on
// @tomplot:customCode:start:70v0f9
// @tomplot:customCode:end
// @formatter:off

object MultiPartSerializer : ModelSerializer<MultiPart, MultiPart>
{
	private val endOfObject: Int = 0
	
	private val partsIndex: Int = 1
	
	override val modelId: UUID
		get() = MultiPart.serializationKey
	
	override val dataClass: Class<MultiPart>
		get() = MultiPart::class.java
	
	override fun serialize(serializationContext: SerializationContext, stream: OutputStream, schema: Schema, entity: MultiPart)
	{
		stream.writeUnsignedVarInt(partsIndex)
		schema.serialize(serializationContext, stream, entity.parts)
		
		stream.writeUnsignedVarInt(endOfObject)
	}
	
	override fun deserialize(deserializationContext: DeserializationContext, stream: InputStream, schema: Schema): MultiPart
	{
		var parts: MutableList<ContentPart>? = mutableListOf()
		
		while (true)
		{
			when (stream.readUnsignedVarInt())
			{
				endOfObject -> return DefaultMultiPart(
					parts!!.toMutableList(),
				)
				partsIndex -> parts = schema.deserialize(deserializationContext, stream)
				else -> schema.deserialize<Any>(deserializationContext, stream)
			}
		}
	}
	
	// @formatter:on
	// @tomplot:customCode:start:5CFs54
	// @tomplot:customCode:end
	// @formatter:off
}
// @formatter:on
